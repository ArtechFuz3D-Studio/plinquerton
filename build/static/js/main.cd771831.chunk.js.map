{"version":3,"sources":["App.js","index.js"],"names":["BallAndCollisions","args","v","THREE","cam","useRef","useSphere","mass","material","restitution","ref","api","usePlane","position","rotation","Math","PI","onCollide","set","velocity","useEffect","subscribe","p","current","lerp","max","lookAt","PerspectiveCamera","makeDefault","fov","map","useTexture","transmission","roughness","thickness","envMapIntensity","Block","forwardRef","shake","vec","props","group","useBox","e","contact","impactVelocity","block","useFrame","useImperativeHandle","RoundedBox","radius","smoothness","Paddle","state","mouse","x","MovingBlock","offset","y","z","sin","clock","elapsedTime","viewport","width","Background","scale","useAspect","App","dpr","camera","iterations","gravity","Array","from","length","_","i","Environment","preset","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd771831.chunk.js","sourcesContent":["import * as THREE from \"three\"\nimport { forwardRef, useEffect, useImperativeHandle, useRef } from \"react\"\nimport { Canvas, useFrame } from \"@react-three/fiber\"\nimport { PerspectiveCamera, RoundedBox, Environment, useTexture, useAspect } from \"@react-three/drei\"\nimport { Physics, useSphere, useBox, usePlane } from \"@react-three/cannon\"\n\nfunction BallAndCollisions({ args = [1.2, 32, 32], v = new THREE.Vector3() }) {\n  const cam = useRef()\n  const [ref, api] = useSphere(() => ({ args: 1.2, mass: 1, material: { restitution: 0.95 } }))\n  usePlane(() => ({ position: [0, -15, 0], rotation: [-Math.PI / 2, 0, 0], onCollide: () => (api.position.set(0, 0, 0), api.velocity.set(0, 0, 0)) }))\n  usePlane(() => ({ position: [-15, 0, 0], rotation: [-Math.PI / 2, Math.PI / 2, 0] }))\n  usePlane(() => ({ position: [15, 0, 0], rotation: [Math.PI / 2, -Math.PI / 2, 0] }))\n  useEffect(\n    () => api.position.subscribe((p) => (cam.current.position.lerp(v.set(p[0], p[1], 18 + Math.max(0, p[1]) / 2), 0.05), cam.current.lookAt(0, 0, 0))),\n    [],\n  )\n  return (\n    <>\n      <PerspectiveCamera ref={cam} makeDefault position={[0, 0, 12.5]} fov={55} />\n      <mesh ref={ref}>\n        <sphereGeometry args={args} />\n        <meshPhysicalMaterial map={useTexture(\"/cross.jpg\")} transmission={1} roughness={0} thickness={10} envMapIntensity={1} />\n      </mesh>\n    </>\n  )\n}\n\nconst Block = forwardRef(({ shake = 0, args = [1, 1.5, 4], vec = new THREE.Vector3(), ...props }, ref) => {\n  const group = useRef()\n  const [block, api] = useBox(() => ({ args, ...props, onCollide: (e) => (shake += e.contact.impactVelocity / 12.5) }))\n  useFrame(() => group.current.position.lerp(vec.set(0, (shake = THREE.MathUtils.lerp(shake, 0, 0.1)), 0), 0.2))\n  useImperativeHandle(ref, () => api, [api])\n  return (\n    <group ref={group}>\n      <RoundedBox ref={block} args={args} radius={0.4} smoothness={10}>\n        <meshPhysicalMaterial transmission={1} roughness={0} thickness={3} envMapIntensity={4} />\n      </RoundedBox>\n    </group>\n  )\n})\n\nfunction Paddle({ args = [5, 1.5, 4] }) {\n  const api = useRef()\n  useFrame((state) => (api.current.position.set(state.mouse.x * 10, -5, 0), api.current.rotation.set(0, 0, (state.mouse.x * Math.PI) / 4)))\n  return <Block ref={api} args={args} material={{ restitution: 1.3 }} />\n}\n\nfunction MovingBlock({ offset = 0, position: [x, y, z], ...props }) {\n  const api = useRef()\n  useFrame((state) => api.current.position.set(x + (Math.sin(offset + state.clock.elapsedTime) * state.viewport.width) / 4, y, z))\n  return <Block ref={api} args={[3, 1.5, 4]} material={{ restitution: 1.1 }} {...props} />\n}\n\nconst Background = (props) => (\n  <mesh scale={useAspect(5000, 3800, 3)} {...props}>\n    <planeGeometry />\n    <meshBasicMaterial map={useTexture(\"/bg.jpg\")} />\n  </mesh>\n)\n\nexport const App = () => (\n  <Canvas dpr={1.5} camera={{ position: [0, 3, 12], fov: 50 }}>\n    <Physics iterations={5} gravity={[0, -30, 0]}>\n      <BallAndCollisions />\n      <Paddle />\n      {Array.from({ length: 6 }, (_, i) => <MovingBlock key={i} position={[0, 1 + i * 4.5, 0]} offset={10000 * i} />) /* prettier-ignore */}\n      <Block args={[10, 1.5, 4]} position={[-11, -7, 0]} rotation={[0, 0, -0.7]} material={{ restitution: 1.2 }} />\n      <Block args={[10, 1.5, 4]} position={[11, -7, 0]} rotation={[0, 0, 0.7]} material={{ restitution: 1.2 }} />\n      <Environment preset=\"warehouse\" />\n      <Background position={[0, 0, -5]} />\n    </Physics>\n  </Canvas>\n)\n","// The background image is a joint-work by:\n// JamieCrazyFox: https://twitter.com/JamieCrazyFox\n// Onyro_Crypto: https://twitter.com/Onyro_Crypto\n\nimport { render } from \"react-dom\"\nimport \"./styles.css\"\nimport { App } from \"./App\"\n\nrender(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}